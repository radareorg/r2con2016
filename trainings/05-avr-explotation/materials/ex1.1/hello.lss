
hello.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000ee  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000564  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bea  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000012b2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9c:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <send_byte>:

#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void send_byte(uint8_t byte){
	 while((UCSR1A &(1<<UDRE1)) == 0);
  a4:	90 91 9b 00 	lds	r25, 0x009B
  a8:	95 ff       	sbrs	r25, 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <send_byte>
	 UDR1 = byte;
  ac:	80 93 9c 00 	sts	0x009C, r24
  b0:	08 95       	ret

000000b2 <main>:


int main (void)
{

	UBRR1H = ( BAUD_PRESCALE >> 8) ;
  b2:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = ( BAUD_PRESCALE ) ; 
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	80 93 99 00 	sts	0x0099, r24
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
  bc:	80 91 9a 00 	lds	r24, 0x009A
  c0:	88 69       	ori	r24, 0x98	; 152
  c2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C |= (1<<USBS1) | (3<<UCSZ10); 
  c6:	80 91 9d 00 	lds	r24, 0x009D
  ca:	8e 60       	ori	r24, 0x0E	; 14
  cc:	80 93 9d 00 	sts	0x009D, r24
	
	while(1)
	{
		send_byte('H');
  d0:	88 e4       	ldi	r24, 0x48	; 72
  d2:	0e 94 52 00 	call	0xa4	; 0xa4 <send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	80 e7       	ldi	r24, 0x70	; 112
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x34>
  e6:	00 00       	nop
  e8:	f3 cf       	rjmp	.-26     	; 0xd0 <main+0x1e>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
